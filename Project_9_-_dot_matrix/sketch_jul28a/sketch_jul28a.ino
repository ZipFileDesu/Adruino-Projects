#include <SPI.h>
#include <Adafruit_GFX.h>
#include "LedControl.h"

LedControl lc = LedControl(4, 5, 6, 1); 

const byte SQUARE[][8] = {
{
  B11111110,
  B10010010,
  B10010010,
  B11111110,
  B10010010,
  B10010010,
  B11111110,
  B00000000
},{
  B01111111,
  B01001001,
  B01001001,
  B01111111,
  B01001001,
  B01001001,
  B01111111,
  B00000000
},{
  B00000000,
  B01111111,
  B01001001,
  B01001001,
  B01111111,
  B01001001,
  B01001001,
  B01111111
},{
  B00000000,
  B11111110,
  B10010010,
  B10010010,
  B11111110,
  B10010010,
  B10010010,
  B11111110
}};

const byte SNAKE[][8] = {
{
  B11100000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000
},{
  B01110000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000
},{
  B00111000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000
},{
  B00011100,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000
},{
  B00001110,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000
},{
  B00000111,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000
},{
  B00000011,
  B00000001,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000
},{
  B00000001,
  B00000001,
  B00000001,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000
},{
  B00000000,
  B00000001,
  B00000001,
  B00000001,
  B00000000,
  B00000000,
  B00000000,
  B00000000
},{
  B00000000,
  B00000000,
  B00000001,
  B00000001,
  B00000001,
  B00000000,
  B00000000,
  B00000000
},{
  B00000000,
  B00000000,
  B00000000,
  B00000001,
  B00000001,
  B00000001,
  B00000000,
  B00000000
},{
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000001,
  B00000001,
  B00000001,
  B00000000
},{
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000001,
  B00000001,
  B00000001
},{
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000001,
  B00000011
},{
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000111
},{
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00001110
},{
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00011100
},{
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00111000
},{
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B01110000
},{
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B11100000
},{
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B10000000,
  B11000000
},{
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B10000000,
  B10000000,
  B10000000
},{
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B10000000,
  B10000000,
  B10000000,
  B00000000
},{
  B00000000,
  B00000000,
  B00000000,
  B10000000,
  B10000000,
  B10000000,
  B00000000,
  B00000000
},{
  B00000000,
  B00000000,
  B10000000,
  B10000000,
  B10000000,
  B00000000,
  B00000000,
  B00000000
},{
  B00000000,
  B10000000,
  B10000000,
  B10000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000
},{
  B10000000,
  B10000000,
  B10000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000
},{
  B11000000,
  B10000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000
}};

const int SQUARE_LEN = sizeof(SQUARE)/8;
const int SNAKE_LEN = sizeof(SNAKE)/8;
volatile boolean flag = false;
volatile unsigned long last_micros;
int k = 0;
int l = 0;

void setup() {
  Serial.begin(9600);
  lc.clearDisplay(0);
  lc.shutdown(0,false);
  lc.setIntensity(0,2);
  attachInterrupt(0, debounceInterrupt, FALLING);
  // выставляем яркость на среднее значение:
}

void debounceInterrupt() {
  if((long)(micros() - last_micros) >= (long)200 * 1000) {
    Interrupt();
    last_micros = micros();
  }
}

void Interrupt() {
  flag = !flag;
}


void buildCube(){
  if (l >= SNAKE_LEN){
    l = 0;
  }
  for(int j = 0; j < 8; ++j){
    lc.setRow(0,j,SNAKE[l][j]);
  }
  ++l;
}

void buildSquare(){
  if (k >= SQUARE_LEN){
    k = 0;
  }
  for (int j = 0; j < 8; ++j){
    lc.setRow(0,j,SQUARE[k][j]);
  }
  ++k;
}

void loop() {
  // очищаем дисплей:
  lc.clearDisplay(0);
  if (flag){
    buildSquare();
  }
  else{
    buildCube();
  }
  delay(100);
}
